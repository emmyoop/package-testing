# **what?**
# Run tests for dbt-utils against supported adapters

# **why?**
# To ensure that dbt-utils works as expected with all supported adapters

# **when?**
# On every PR, and every push to main and when manually triggered

name: Package Integration Tests

on:
    workflow_call:
        inputs:
            POSTGRES_SCHEMA:
                description: "The schema to use for the tests"
                required: false
                type: string
                default: "integration_tests_postgres_${{ github.run_number }}"
            POSTGRES_HOST:
                description: "The host"
                required: false
                type: string
                default: "localhost"
            POSTGRES_USER:
                description: "The user"
                required: false
                type: string
                default: "root"
            POSTGRES_PORT:
                description: "The port"
                required: false
                type: string
                default: "5432"
            POSTGRES_DATABASE:
                description: "The database"
                required: false
                type: string
                default: "postgres_test"
            DBT_ENV_SECRET_POSTGRES_PASS:
                description: "The password that isn't secret"
                type: string
                default: "postgres_test"

env:
    PYTHON_VERSION: "3.11"

jobs:
    determine-supported-adapters:
        runs-on: ubuntu-latest
        outputs:
            adapters: ${{ steps.supported-adapters.outputs.adapters }}
        steps:
            - name: "Checkout ${{ github.event.repository }}"
              uses: actions/checkout@v4

            - name: "Set up Python ${{ env.PYTHON_VERSION }}"
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: "Install tox"
              run: |
                  python -m pip install --upgrade pip
                  pip install tox

            - name: "Get list of supported adapters"
              id: list-adapters
              run: |
                # github adds a pip freeze and a new line we need to strip out
                source supported_adapters.env
                echo $SUPPORTED_ADAPTERS
                echo "test_adapters=$SUPPORTED_ADAPTERS" >> $GITHUB_OUTPUT

            - name: "Format adapter list for use as the matrix"
              id: supported-adapters
              run: |
                  # Convert to JSON array and output
                  supported_adapters=$(echo "${{ steps.list-adapters.outputs.test_adapters }}" | jq -Rc 'split(",")')
                  echo $supported_adapters
                  echo "adapters=$supported_adapters" >> $GITHUB_OUTPUT

            - name: "[ANNOTATION] ${{ github.event.repository.name }} - Testing ${{ steps.supported-adapters.outputs.adapters }}"
              run: |
                  title="${{ github.event.repository.name }} - adapters to test"
                  message="The workflow will run tests for the following adapters: ${{ steps.supported-adapters.outputs.adapters }}"
                  echo "::notice $title::$message"

    run-tests:
        runs-on: ubuntu-latest
        needs: [determine-supported-adapters]
        services:
            postgres:
                image: postgres
                env:
                    POSTGRES_USER: ${{ inputs.POSTGRES_USER }}
                    POSTGRES_PASSWORD: ${{ inputs.DBT_ENV_SECRET_POSTGRES_PASS }}
                    POSTGRES_DB: ${{ inputs.POSTGRES_DATABASE }}
                    POSTGRES_HOST: ${{ inputs.POSTGRES_HOST }}
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432
        strategy:
            fail-fast: false
            matrix:
                adapter: ${{fromJson(needs.determine-supported-adapters.outputs.adapters)}}

        steps:
            - name: "Checkout ${{ github.event.repository }} "
              uses: actions/checkout@v4

            - name: "Set up Python ${{ env.PYTHON_VERSION }}"
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: "Install ${{ matrix.adapter }}"
              run: |
                  python -m pip install --upgrade pip
                  pip install dbt-${{ matrix.adapter }}

            - name: "Install tox"
              run: |
                  python -m pip install --upgrade pip
                  pip install tox

            - name: "Run integration tests with tox on ${{ matrix.adapter }}"
              run: |
                  tox -e dbt_integration_${{ matrix.adapter }}
              # Since GitHub just ignores and vars/secrets that are not set we can set everything
              # here and not worry about it
              env:
                  POSTGRES_HOST: ${{ inputs.POSTGRES_HOST }}
                  POSTGRES_USER: ${{ inputs.POSTGRES_USER }}
                  DBT_ENV_SECRET_POSTGRES_PASS: ${{ inputs.DBT_ENV_SECRET_POSTGRES_PASS }}
                  POSTGRES_PORT: ${{ inputs.POSTGRES_PORT }}
                  POSTGRES_DATABASE: ${{ inputs.POSTGRES_DATABASE }}
                  POSTGRES_SCHEMA: ${{ inputs.POSTGRES_SCHEMA }}
                #   SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
                #   SNOWFLAKE_USER: ${{ inputs.SNOWFLAKE_USER }}
                #   DBT_ENV_SECRET_SNOWFLAKE_PASS: ${{ secrets.SNOWFLAKE_PASS }}
                #   SNOWFLAKE_ROLE: ${{ inputs.SNOWFLAKE_ROLE }}
                #   SNOWFLAKE_DATABASE: ${{ inputs.SNOWFLAKE_DATABASE }}
                #   SNOWFLAKE_WAREHOUSE: ${{ inputs.SNOWFLAKE_WAREHOUSE }}
                #   SNOWFLAKE_SCHEMA: ${{ inputs.SNOWFLAKE_SCHEMA }}
                #   REDSHIFT_HOST: ${{ inputs.REDSHIFT_HOST }}
                #   REDSHIFT_USER: ${{ inputs.REDSHIFT_USER }}
                #   DBT_ENV_SECRET_REDSHIFT_PASS: ${{ secrets.REDSHIFT_PASS }}
                #   REDSHIFT_DATABASE: ${{ inputs.REDSHIFT_DATABASE }}
                #   REDSHIFT_SCHEMA: ${{ inputs.REDSHIFT_SCHEMA }}
                #   REDSHIFT_PORT: ${{ inputs.REDSHIFT_PORT }}
                #   BIGQUERY_PROJECT: ${{ inputs.BIGQUERY_PROJECT }}
                #   BIGQUERY_KEYFILE_JSON: ${{ secrets.BIGQUERY_KEYFILE_JSON }}
                #   BIGQUERY_SCHEMA: ${{ inputs.BIGQUERY_SCHEMA }}
                #   TODO: add the rests
